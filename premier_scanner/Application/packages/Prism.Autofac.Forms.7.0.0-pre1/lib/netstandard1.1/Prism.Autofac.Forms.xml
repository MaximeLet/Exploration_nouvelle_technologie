<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Prism.Autofac.Forms</name>
    </assembly>
    <members>
        <member name="T:Prism.Autofac.AutofacExtensions">
            <summary>
            Autofac View Registration Extensions
            </summary>
        </member>
        <member name="M:Prism.Autofac.AutofacExtensions.RegisterTypeForNavigation``1(Autofac.ContainerBuilder,System.String)">
            <summary>
            Registers a Page for navigation.
            </summary>
            <typeparam name="TView">The Type of Page to register</typeparam>
            <param name="builder"><see cref="T:Autofac.ContainerBuilder"/> used to register type for Navigation.</param>
            <param name="name">The unique name to register with the Page</param>
        </member>
        <member name="M:Prism.Autofac.AutofacExtensions.RegisterTypeForNavigation(Autofac.ContainerBuilder,System.Type,System.String)">
            <summary>
            Registers a Page for navigation
            </summary>
            <param name="builder"><see cref="T:Autofac.ContainerBuilder"/> used to register type for Navigation.</param>
            <param name="viewType">The type of Page to register</param>
            <param name="name">The unique name to register with the Page</param>
            <returns><see cref="T:Autofac.ContainerBuilder"/></returns>
        </member>
        <member name="M:Prism.Autofac.AutofacExtensions.RegisterTypeForNavigation``2(Autofac.ContainerBuilder,System.String)">
            <summary>
            Registers a Page for navigation.
            </summary>
            <typeparam name="TView">The Type of Page to register</typeparam>
            <typeparam name="TViewModel">The ViewModel to use as the BindingContext for the Page</typeparam>
            <param name="name">The unique name to register with the Page</param>
            <param name="builder"></param>
        </member>
        <member name="M:Prism.Autofac.AutofacExtensions.RegisterTypeForNavigationOnPlatform``2(Autofac.ContainerBuilder,System.String,System.Type,System.Type,System.Type,System.Type,System.Type)">
            <summary>
            Registers a Page for navigation based on the current Device OS using a shared ViewModel
            </summary>
            <typeparam name="TView">Default View Type to be shared across multiple Device Operating Systems if they are not specified directly.</typeparam>
            <typeparam name="TViewModel">Shared ViewModel Type</typeparam>
            <param name="builder"><see cref="T:Autofac.ContainerBuilder"/> used to register type for Navigation.</param>
            <param name="name">The unique name to register with the Page. If left empty or null will default to the ViewModel root name. i.e. MyPageViewModel => MyPage</param>
            <param name="androidView">Android Specific View Type</param>
            <param name="iOSView">iOS Specific View Type</param>
            <param name="otherView">Other Platform Specific View Type</param>
            <param name="windowsView">Windows Specific View Type</param>
            <param name="winPhoneView">Windows Phone Specific View Type</param>
            <returns><see cref="T:Autofac.ContainerBuilder"/></returns>
        </member>
        <member name="M:Prism.Autofac.AutofacExtensions.RegisterTypeForNavigationOnPlatform``2(Autofac.ContainerBuilder,Prism.IPlatform[])">
            <summary>
            Registers a Page for navigation based on the current Device OS using a shared ViewModel
            </summary>
            <typeparam name="TView">Default View Type to be shared across multiple Device Operating Systems if they are not specified directly.</typeparam>
            <typeparam name="TViewModel">Shared ViewModel Type</typeparam>
            <param name="builder"><see cref="T:Autofac.ContainerBuilder"/> used to register type for Navigation.</param>
            <param name="platforms"></param>
        </member>
        <member name="M:Prism.Autofac.AutofacExtensions.RegisterTypeForNavigationOnPlatform``2(Autofac.ContainerBuilder,System.String,Prism.IPlatform[])">
            <summary>
            Registers a Page for navigation based on the current Device OS using a shared ViewModel
            </summary>
            <typeparam name="TView">Default View Type to be shared across multiple Device Operating Systems if they are not specified directly.</typeparam>
            <typeparam name="TViewModel">Shared ViewModel Type</typeparam>
            <param name="builder"><see cref="T:Autofac.ContainerBuilder"/> used to register type for Navigation.</param>
            <param name="name">The unique name to register with the Page. If left empty or null will default to the View name.</param>
            <param name="platforms"></param>
        </member>
        <member name="M:Prism.Autofac.AutofacExtensions.RegisterTypeForNavigationOnIdiom``2(Autofac.ContainerBuilder,System.String,System.Type,System.Type,System.Type)">
            <summary>
            Registers a Page for navigation based on the Device Idiom using a shared ViewModel
            </summary>
            <typeparam name="TView">Default View Type to be used across multiple Idioms if they are not specified directly.</typeparam>
            <typeparam name="TViewModel">The shared ViewModel</typeparam>
            <param name="builder"><see cref="T:Autofac.ContainerBuilder"/> used to register type for Navigation.</param>
            <param name="name">The common name used for Navigation. If left empty or null will default to the ViewModel root name. i.e. MyPageViewModel => MyPage</param>
            <param name="desktopView">Desktop Specific View Type</param>
            <param name="tabletView">Tablet Specific View Type</param>
            <param name="phoneView">Phone Specific View Type</param>
            <returns><see cref="T:Autofac.ContainerBuilder"/></returns>
        </member>
        <member name="M:Prism.Autofac.AutofacExtensions.RegisterTypeIfMissing(Autofac.ContainerBuilder,System.Type,System.String)">
            <summary>
            Registers a type in the builder only if that type was not already registered,
            after the builder is already created.
            Uses a new ContainerBuilder instance to update the builder.
            </summary>
            <param name="builder">The Container Builder.</param>
            <param name="type">The type to register.</param>
            <param name="name">The name you will use to resolve the component in future.</param>
        </member>
        <member name="M:Prism.Autofac.Modularity.AutofacModuleInitializer.#ctor(Autofac.IComponentContext)">
            <summary>
            Create a new instance of <see cref="T:Prism.Autofac.Modularity.AutofacModuleInitializer"/> with <paramref name="context"/>
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Prism.Autofac.Modularity.AutofacModuleInitializer.CreateModule(System.Type)">
            <summary>
            Create the <see cref="T:Prism.Modularity.IModule"/> for <paramref name="moduleType"/> by resolving from <see cref="F:Prism.Autofac.Modularity.AutofacModuleInitializer._context"/>
            </summary>
            <param name="moduleType">Type of module to create</param>
            <returns>An isntance of <see cref="T:Prism.Modularity.IModule"/> for <paramref name="moduleType"/> if exists; otherwise <see langword="null" /></returns>
        </member>
        <member name="T:Prism.Autofac.Navigation.AutofacPageNavigationService">
            <summary>
            Page navigation service for using Autofac
            </summary>
        </member>
        <member name="M:Prism.Autofac.Navigation.AutofacPageNavigationService.#ctor(Autofac.IComponentContext,Prism.Common.IApplicationProvider,Prism.Logging.ILoggerFacade)">
            <summary>
            Create a new instance of <see cref="T:Prism.Autofac.Navigation.AutofacPageNavigationService"/> with <paramref name="context"/>
            </summary>
            <param name="applicationProvider">An instance of <see cref="T:Prism.Common.IApplicationProvider"/></param>
            <param name="context">An instance of <see cref="T:Autofac.IComponentContext"/></param>
            <param name="logger">An instance of <see cref="T:Prism.Logging.ILoggerFacade"/></param>
        </member>
        <member name="M:Prism.Autofac.Navigation.AutofacPageNavigationService.CreatePage(System.String)">
            <summary>
            Resolve a <see cref="T:Xamarin.Forms.Page"/> from <see cref="F:Prism.Autofac.Navigation.AutofacPageNavigationService._context"/> for <paramref name="segmentName"/>
            </summary>
            <param name="segmentName">Page to resolve</param>
            <returns>A <see cref="T:Xamarin.Forms.Page"/></returns>
        </member>
        <member name="T:Prism.Autofac.PrismApplication">
            <summary>
            Application base class using Autofac
            </summary>
        </member>
        <member name="F:Prism.Autofac.PrismApplication._navigationServiceName">
            <summary>
            Service key used when registering the <see cref="T:Prism.Autofac.Navigation.AutofacPageNavigationService"/> with the container
            </summary>
        </member>
        <member name="M:Prism.Autofac.PrismApplication.#ctor(Prism.Autofac.IPlatformInitializer)">
            <summary>
            Create a new instance of <see cref="T:Prism.Autofac.PrismApplication"/>
            </summary>
            <param name="platformInitializer">Class to initialize platform instances</param>
            <remarks>
            The method <see cref="M:IPlatformInitializer.RegisterTypes(ContainerBuilder)"/> will be called after <see cref="M:PrismApplication.RegisterTypes()"/> 
            to allow for registering platform specific instances.
            </remarks>
        </member>
        <member name="P:Prism.Autofac.PrismApplication.Builder">
            <summary>
             Gets or Sets the Autofac Container Builder
            </summary>
        </member>
        <member name="P:Prism.Autofac.PrismApplication.Container">
            <summary>
            Gets or Sets the Autofac IContainer
            </summary>
        </member>
        <member name="M:Prism.Autofac.PrismApplication.CreateBuilder">
            <summary>
            Creates the Container Builder
            </summary>
            <returns></returns>
        </member>
        <member name="M:Prism.Autofac.PrismApplication.Initialize">
            <summary>
            Run the bootstrapper process.
            </summary>
        </member>
        <member name="M:Prism.Autofac.PrismApplication.ConfigureViewModelLocator">
            <summary>
            Configures the ViewModel Locator to resolve the ViewModel type and ensure the correct
            instance of <see cref="T:Prism.Navigation.INavigationService"/> is properly injected into the ViewModel.
            </summary>
        </member>
        <member name="M:Prism.Autofac.PrismApplication.CreateContainer">
            <summary>
            This is not used for Autofac and will throw a <see cref="T:System.NotImplementedException"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Prism.Autofac.PrismApplication.CreateModuleManager">
            <summary>
            Creates the <see cref="T:Prism.Modularity.IModuleManager"/> from the container.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Prism.Autofac.PrismApplication.CreateNavigationService">
            <summary>
            Create instance of <see cref="T:Prism.Navigation.INavigationService"/>
            </summary>
            <remarks>
            The Autofac Navigation Service Name is used when resolving
            </remarks>
            <returns>Instance of <see cref="T:Prism.Navigation.INavigationService"/></returns>
        </member>
        <member name="M:Prism.Autofac.PrismApplication.ConfigureContainer">
            <summary>
            Registers all of the base Prism Services.
            </summary>
        </member>
        <member name="M:Prism.Autofac.PrismApplication.FinishContainerConfiguration">
            <summary>
            Finish the container's configuration after all other types are registered.
            </summary>
        </member>
    </members>
</doc>
